nextflow_pipeline {

    name "Test nf-core-utils config validation functions"
    script "../config-validation/main.nf"
    config "../config-validation/nextflow.config"

    test("Validate configuration functions") {
        
        then {
            assert workflow.success
            assert workflow.exitStatus == 0
            
            // Verify basic pipeline execution markers (stdout is a list)
            assert workflow.stdout.any { it.contains("Pipeline is starting") }
            assert workflow.stdout.any { it.contains("Pipeline complete") }
            
            // Snapshot the basic workflow execution
            assert snapshot(
                // workflow.stdout, // No workflow.stdout before we can sanitize this with nft-utils
                workflow.exitStatus,
                workflow.success
            ).match()
        }
    }

    test("Conda channel configuration") {
        
        then {
            assert workflow.success
            
            // Should have conda channel warnings in stderr (this is expected)
            // assert workflow.stderr.toString().contains("Conda configuration") || 
            //        workflow.stderr.toString().contains("conda-forge") ||
            //        workflow.stderr.toString().contains("bioconda")
            
            // Snapshot conda-related outputs
            assert snapshot(
                workflow.stderr.findAll { it.contains("conda") || it.contains("Conda") }
            ).match()
        }
    }

    test("Conda warnings") {
        
        then {
            assert workflow.success
            assert workflow.exitStatus == 0
            
            // Even with conda warnings, workflow should complete successfully
            assert workflow.stdout.any { it.contains("Pipeline complete") }
            
            // Snapshot successful completion despite warnings
            assert snapshot(
                workflow.success,
                workflow.exitStatus
            ).match()
        }
    }

    test("monochrome_logs params enabled") {
        
        when {
            params {
                monochrome_logs = true
            }
        }

        then {
            assert workflow.success
            assert workflow.exitStatus == 0
            
            // Should complete successfully (the detailed logs are not captured in workflow.stdout by nf-test)
            assert workflow.stdout.any { it.contains("Pipeline is starting") }
            assert workflow.stdout.any { it.contains("Pipeline complete") }
            
            // Snapshot basic successful execution
            assert snapshot(
                // workflow.stdout, // No workflow.stdout before we can sanitize this with nft-utils
                workflow.exitStatus
            ).match()
        }
    }

    test("monochrome_logs params disabled") {
        
        when {
            params {
                monochrome_logs = false
            }
        }

        then {
            assert workflow.success
            assert workflow.exitStatus == 0
            
            // Should complete successfully
            assert workflow.stdout.any { it.contains("Pipeline is starting") }
            assert workflow.stdout.any { it.contains("Pipeline complete") }
            
            // Snapshot integration scenario success
            assert snapshot(
                // workflow.stdout, // No workflow.stdout before we can sanitize this with nft-utils
                workflow.exitStatus
            ).match()
        }
    }
}