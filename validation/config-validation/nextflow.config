/*
 * Nextflow configuration for configuration validation tests
 */

// Enable the plugin for testing
plugins {
    id 'nf-core-utils'
}

// Workflow manifest - simulates fetchngs pipeline
manifest {
    name            = 'nf-core/fetchngs'
    version         = '1.12.0'
    description     = 'Configuration validation test for nf-core-utils plugin'
    homePage        = 'https://github.com/nf-core/fetchngs'
    author          = 'nf-core'
    nextflowVersion = '>=23.04.0'
}

// Workflow parameters - typical fetchngs setup
params {
    // Input/Output
    input                      = 'SRR_Acc_List.txt'
    outdir                     = "${launchDir}/validation_results"

    // Reference genome options
    genome                     = null
    igenomes_base              = 's3://ngi-igenomes/igenomes'
    igenomes_ignore            = false

    // Download method options
    download_method            = 'sratools'

    // SRA / ENA / GEO / DDBJ download options
    skip_fastqc                = false
    skip_multiqc               = false

    // Boilerplate options
    email                      = null
    email_on_fail              = null
    plaintext_email            = false
    monochrome_logs            = false
    hook_url                   = null
    help                       = false
    version                    = false
    validate_params            = true
    show_hidden_params         = false
    schema_ignore_params       = 'genomes,igenomes_base'

    // Config options
    custom_config_version      = 'master'
    custom_config_base         = 'https://raw.githubusercontent.com/nf-core/configs/master'
    config_profile_name        = 'Test profile'
    config_profile_description = 'Minimal test dataset to check pipeline functionality'
    config_profile_contact     = 'nf-core'
    config_profile_url         = 'https://github.com/nf-core/configs'

    // Max resource options
    max_memory                 = '6.GB'
    max_cpus                   = 2
    max_time                   = '6.h'

    // Test-specific parameters
    test_mode                  = true
}

// Process configuration - simulate realistic setup
process {
    // Use conda by default for testing conda channel validation
    conda         = "${projectDir}/mock-data/environment.yml"

    // Resource limits
    memory        = '1 GB'
    time          = '10 min'
    cpus          = 1

    // Error strategy for testing
    errorStrategy = 'retry'
    maxRetries    = 1
}

// Conda configuration for testing conda channel validation
conda {
    enabled       = true
    createTimeout = '1 h'

    // Channels configuration - this will be tested by checkCondaChannels()
    channels      = [
        'conda-forge',
        'bioconda',
        'defaults',
    ]
}

// Report configuration
timeline {
    enabled   = true
    file      = "${params.outdir}/execution_timeline.html"
    overwrite = true
}

report {
    enabled   = true
    file      = "${params.outdir}/execution_report.html"
    overwrite = true
}

trace {
    enabled   = true
    file      = "${params.outdir}/execution_trace.txt"
    overwrite = true
}

dag {
    enabled   = true
    file      = "${params.outdir}/pipeline_dag.svg"
    overwrite = true
}

// Logging configuration
log.level = 'INFO'

// Testing profiles - this configuration will be tested by checkConfigProvided()
profiles {

    // Standard nf-core profiles
    debug {
        dumpHashes           = true
        process.beforeScript = 'echo $HOSTNAME'
        cleanup              = false
    }

    conda {
        conda.enabled        = true
        docker.enabled       = false
        singularity.enabled  = false
        podman.enabled       = false
        shifter.enabled      = false
        charliecloud.enabled = false
        channels             = ['conda-forge', 'bioconda', 'defaults']
        apptainer.enabled    = false
    }

    mamba {
        conda.enabled        = true
        conda.useMamba       = true
        docker.enabled       = false
        singularity.enabled  = false
        podman.enabled       = false
        shifter.enabled      = false
        charliecloud.enabled = false
        apptainer.enabled    = false
    }

    docker {
        docker.enabled       = true
        docker.userEmulation = true
        conda.enabled        = false
        singularity.enabled  = false
        podman.enabled       = false
        shifter.enabled      = false
        charliecloud.enabled = false
        apptainer.enabled    = false
    }

    arm {
        docker.runOptions = '-u $(id -u):$(id -g) --platform=linux/amd64'
    }

    singularity {
        singularity.enabled    = true
        singularity.autoMounts = true
        conda.enabled          = false
        docker.enabled         = false
        podman.enabled         = false
        shifter.enabled        = false
        charliecloud.enabled   = false
        apptainer.enabled      = false
    }

    podman {
        podman.enabled       = true
        conda.enabled        = false
        docker.enabled       = false
        singularity.enabled  = false
        shifter.enabled      = false
        charliecloud.enabled = false
        apptainer.enabled    = false
    }

    shifter {
        shifter.enabled      = true
        conda.enabled        = false
        docker.enabled       = false
        singularity.enabled  = false
        podman.enabled       = false
        charliecloud.enabled = false
        apptainer.enabled    = false
    }

    charliecloud {
        charliecloud.enabled = true
        conda.enabled        = false
        docker.enabled       = false
        singularity.enabled  = false
        podman.enabled       = false
        shifter.enabled      = false
        apptainer.enabled    = false
    }

    apptainer {
        apptainer.enabled    = true
        apptainer.autoMounts = true
        conda.enabled        = false
        docker.enabled       = false
        singularity.enabled  = false
        podman.enabled       = false
        shifter.enabled      = false
        charliecloud.enabled = false
    }

    test {
        // Test profile with specific parameters
        params {
            config_profile_name        = 'Test profile'
            config_profile_description = 'Minimal test dataset to check pipeline functionality'

            // Limit resources for testing
            max_cpus                   = 2
            max_memory                 = '6.GB'
            max_time                   = '6.h'

            // Test-specific settings
            input                      = 'https://raw.githubusercontent.com/nf-core/test-datasets/fetchngs/samplesheet/samplesheet_test.csv'
        }
    }

    test_full {
        // Full test profile
        params {
            config_profile_name        = 'Full test profile'
            config_profile_description = 'Full test dataset to check pipeline functionality'

            // Full test settings
            input                      = 'https://raw.githubusercontent.com/nf-core/test-datasets/fetchngs/samplesheet/samplesheet_test_full.csv'
        }
    }
}

// Validation-specific settings
validation {
    // Enable strict validation
    strictMode   = true

    // Configuration validation test settings
    testProfiles = [
        'test',
        'test_full',
        'docker',
        'conda',
    ]
}

// Cleanup configuration
cleanup = false
