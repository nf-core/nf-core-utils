nextflow_pipeline {

    name "Test nf-core-utils color formatting error messages"
    script "../config-validation/error-test.nf"
    config "../config-validation/nextflow.config"

    test("Error output - Monochrome") {
        
        when {
            params {
                monochrome_logs = true
            }
        }

        then {
            assert workflow.failed
            assert workflow.exitStatus != 0
            
            // Should contain error message without color codes
            assert workflow.stdout.any { it.contains("Pipeline is starting") }
            
            // Check stdout for the actual error message (error appears in stdout in nf-test)
            def errorMessage = workflow.stdout.join('\n')
            assert errorMessage.contains("trailing comma")
            assert errorMessage.contains("ERROR")
            assert errorMessage.contains("HINT")
            
            // Should NOT contain ANSI color codes
            assert !errorMessage.contains('\033[')
            
            // Snapshot monochrome error output
            assert snapshot(
                workflow.stdout.findAll { it.contains("ERROR") || it.contains("HINT") }
            ).match()
        }
    }

    test("Error output - Color") {
        
        when {
            params {
                monochrome_logs = false
            }
        }

        then {
            assert workflow.failed
            assert workflow.exitStatus != 0
            
            // Should contain error message with color codes
            assert workflow.stdout.any { it.contains("Pipeline is starting") }
            
            // Check stdout for the actual error message (error appears in stdout in nf-test)
            def errorMessage = workflow.stdout.join('\n')
            assert errorMessage.contains("trailing comma")
            assert errorMessage.contains("ERROR")
            assert errorMessage.contains("HINT")
            
            // Note: Color codes may not be visible in test output due to nf-test capturing
            // The important thing is that the function accepts the parameter without errors
            // In real usage, colors would be displayed based on terminal capabilities
            
            // Snapshot color error output
            assert snapshot(
                workflow.stdout.findAll { it.contains("ERROR") || it.contains("HINT") }
            ).match()
        }
    }
}